#!/usr/bin/env bash

## 스크립트 용 임시 로거 구현
## log [D|I|W|E|S|C] "MESSAGE"
declare -rA LOGGING_LEVEL=([D]=DEBUG [I]=INFO [W]=WARN [E]=ERROR [S]=SEVERE [C]=CRITICAL)
declare -rA LOGGING_PRIORITY=([DEBUG]=0 [INFO]=1 [WARN]=2 [ERROR]=3 [SEVERE]=4 [CRITICAL]=5)

log_get_now(){
    echo "$(TZ='Asia/Seoul' date '+%Y-%m-%dT%T%z')"
}

log_say(){
    local -u logger_level=${LOGGING_LEVEL[${1}]}
    if [[ -z ${3} ]]; then
        printf "[$(log_get_now)][%8s] %s\n" "${logger_level}" "${2}" 2>&1
    else
        printf "[$(log_get_now)][%8s] %s\n" "${logger_level}" "${2}" 2>&1 | tee -a ${3}
    fi
}

log_log(){
    local -u logger_level=${LOGGING_LEVEL[${1}]}
    local -u setting_level=${LOG_LEVEL}
    local priority=${LOGGING_PRIORITY[${logger_level}]}
    local setting_priority=${LOGGING_PRIORITY[${setting_level}]}

    if [[ -z ${priority} ]]; then
        log_say W "Unknown log level: ${1}, set to DEBUG" "${LOG_FILE}"
        priority=0
    fi
    if [[ -z ${setting_priority} ]]; then
        log_say W "Unknown log level: ${LOG_LEVEL}, set to ERROR" "${LOG_FILE}"
        setting_priority=3
    fi
    (( priority < setting_priority )) && return 0
    log_say "${1}" "${2}" "${LOG_FILE}"
}
